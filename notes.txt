Magesh Kuppan

Schedule
Commence    : 09:30 
Tea Break   : 11:00 (20 mins)
Lunch Break : 13:00 (60 mins)
Tea Break   : 15:30 (20 mins)
Windup      : 17:30 

Methodology
    - Hands on driven
    - No powerpoints
    - 50% completion

1. Name
2. Total Experience
3. Primary Skillset
4. Experience in any JS framework (Backbone.js / Angular etc)
5. Experience in React if any 
6. Any interesting books you have read / any shows you watched recently

Attitude is Everything
Power of subconsious mind
The richest man in Babylon
The Secret

Pushkin Vertigo
britbox.com

What is React.js?
    JavaScript Library
    framework for buildig RIA (Rich Internet Applications)


ES6 (ES2015 / ESNext / ECMAScript6)
1. let
2. const
3. array destructuring
4. rest operator (array)
5. spread operator (array)
6. object destructuring
7. rest operator (object)
8. spread operator (object)
9. object construction enhancement
10. default arguments
11. arrow functions
12. iterators
13. template strings
14. class

http://es6-features.org

class Employee {
    id = 0;
    name = '';
    salary = 0;

    constructor(id, name, salary){
        this.id = id;
        this.name = name;
        this.salary = salary;
    }
    
    display = () => {
        console.log(`id=${this.id}, name=${this.name} and salary=${this.salary}`);
    } 
}

class FullTimeEmployee extends Employee {
    benefits = '';
    constructor(id, name, salary, benefits){
        super(id, name, salary)
        this.benefits = benefits;
    }
}


HTML vs JSX

HTML => Open tags are allowed
JSX => Every open tag must have a corresponding close tag

HTML => "for" attribute is valid
JSX => use "htmlFor" instead of "for"

HTML => "class" attribute is valid
JSX => use "className" instead of "class"


Components as functions
    - Memory Efficient
    - Lifecycle methods in class based Components
        - componentWillMount
        - componentDidMount
        - shouldComponentUpdate
        - render
        - componentWillunmount

    func(input) => output
    React Hooks
        functions to handle side effects in functional components
            hook function names must start with the word 'use'

        Builtin hooks
            -useState
            -useEffect
            -useCallback
            -useMemo
            -useReducer
            -useRef
    
State
    UI State
        - data that supports the presentation needs of the application
        - it is highly UNLIKELY that this data is needed in other parts of the application (outside the component)
        - feel free to maintain this in the component state

    App State
        - data that supports the core domain logic of the application
        - it is highly LIKELY that this data is needed throughout the application
        - DO NOT dare to maintain this in the component state (keep it outside the component hierarchy)


Flux architecture
Redux (implementation of Flux architecture (a slightly altered version))


package managers in Node.js
    npm
    yarn

[sudo] npm install yarn -g

to create a react application
    from the folder where you want to create the new application
        npx create-react-app bug-tracker-app


ES6 Module system
    Everything defined in a js file is considered private to that file
    Anything to be exposed as public should be explicitly 'exported'
    If we want to use anything from another file, they have to be explicitly 'imported'


bug-tracker-app
    /src
        /bugs
            /actions
                addNew.js
                remove.js
                toggle.js
                removeClosed.js
                index.js
            /components
                bugStats.jsx
                bugEdit.jsx
                bugSort.jsx
                bugList.jsx
                bugItem.jsx
            /reducers
                bugsReducer.js
            index.js (main Bugs component)
        /store
            index.js (creating the store)
        
        index.js
            import the action creators
            create the action dispatchers
            Host the component
                

Day-4 Homework
    0. Refactor the bugTracker code in the newly created app setup
    1. Implement the projects (Adding & Listing)
    2. Read about ES6 Promise


react-redux (adapter between react and redux)
    (to install run the command 'yarn add react-redux'  )
    Provider
    connect
        mapStateToProps (from the given 'storeState' extract the data for the component)
        mapDispatchToProps (from the given 'dispatch' , create the action dispatchers to be passed as props to the component)
